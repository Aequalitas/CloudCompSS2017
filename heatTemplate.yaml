heat_template_version: 2016-04-08
#The value of heat_template_version tells HEAT not only the format of the template but also features that will be validated and supported
#2016-04-08 represents the Mitaka release

#this section (parameters) allows the specification of input parameters (with default values)
parameters:
  #network parameters (neutron)
  public_network:
    type: string
    label: public network
    description: public network (id or name) that is used as external network
    default: f4f8b2e9-520a-481c-a1e3-bc1d8015d35b

  dns_nameserver:
    type: comma_delimited_list
    label: dns nameserver
    description: ip addresses of dns servers that are used for neutron subnet creation
    default: 8.8.8.8

  #compute parameters (nova)
  ssh_key_name:
    type: string
    label: ssh key name
    description: name of an existing ssh keypair that is injected during instance initialization
    default: weidmann
    hidden: false
    constraints:
      - custom_constraint: nova.keypair

  image_id:
    type: string
    label: image id
    description: image id that is used for instance creation
    default: fb8d8ef9-6274-4279-b3ee-525bd7fecfac #VMDK Ubuntu 14.04
    hidden: false
    constraints:
      - custom_constraint: glance.image

  instance_flavor:
    type: string
    label: instance flavor that is used for instance creation
    description: flavor used for instances
    default: m1.small
    hidden: false
    constraints:
      - custom_constraint: nova.flavor

  server_name:
    type: string
    label: server name
    description: name of the instances
    hidden: false
    default: webServer

  haProxy_name:
    type: string
    label: haProxy name
    description: name of the haProxy instance
    hidden: false
    default: haProxy

  username:
    type: string
    label: username
    description: username of the additional user
    hidden: false
    default: webserver

  gecos:
    type: string
    label: users full name
    description: full name of the additional user
    hidden: false
    default: webserver

  user_key:
    type: string
    label: users public key
    description: public key of the additional user that is injected during instance initialization
    hidden: false
    default: ssh-rsa MIIEqQIBAAKCAQEAm20SS9yznje9NiZEgV/BNNo+XGyfbpMbydd+7RKvqjX3N5wZ
                    AflCjgJn+ScYFSX3OCvyUg6mRzN8xngGM3w2KpEtQSWCjWd2CxZxWMHbtBJtNChK
                    2m35xw/NvKEPowVlJW53Gad62rQYzNxlfC9XwhynrYszN8rMMIb+EkMRlSGYnnNz
                    ax70eDP6rkGNoj8iQQptyiAwvFBVCy6xmekIaKeT8JjABlFAdupEqv6DsKjbMP9K
                    iCmYjCvhAfzwpYF+ooJbQ5dSIKDLznQwOTBmIkXp0xVzqB0MybSvAQu7ogWryxWH
                    pkhOG9YmLVmSlAjKlsDvfs1KLHLlCSEV+RBdiwIDAQABAoIBAQCPHOKA+epmIBrY
                    Vmoz2jCz8tUDE33GOiyXMRcNQmx/xQsqqFAakiKnUi3crBOvvXKixUxuJFEVNKKK
                    uQ+0roXNsjnCR8CrZX26/eJGgNJFP8ZQBV3PPP6GPdYJ/x+/0wLscYe3FpC3+qbv
                    U20a6RjcgrgewxLZJ6HWeSZPOHRjJMmCuovvWGKyvfsBFi5jfyGflyZQ0vLcphaT
                    /WrlfO+qg3kwK9QZLLbla6tUFqsURfPsXfYQ7fg5bODugWOgSW8nhub6WvWGCFNa
                    bZUxmxggiO2IK+TTlV8rN/GfNMfg0PmYQ2X5KDXbtfcucXvLPLwrxqHKyYIpSPD3
                    yiIBZPaBAoIAgQC+nHBb2Rp4swOxxtwXEL96wDEz9p2J2UGuyt+yTZAUX9FOvTlI
                    +/31AfBe46LZLfWmekuL6FweeC4MWEncIU2d3ixxByGGy3OAnoX+qWHeWjzQzk+2
                    zE43ONWurUdEAdOwqIYbLdKRGXcndW0UQHHnhpEOet2rg3lAMsPNI0qGywKCAIEA
                    0L6qbhM12cL0TNPk0YUTN5BJgaxof+bzq/2ckD+mq8p6rk8Ke43ZcHuhQIjj/ruP
                    H+H8jYzRfUmuafFP3qmBNEwm2Vv8F6n7CcBO2eYK36YgdsFoVNPbaePnlpvvb9n0
                    VJ3DrutOU9kOau7Q5X7c0sd6wtwJQYwaEQd6DV+D7EECggCAIvlfYGr4gXcPUXpU
                    feLzz1kebhNtGpMDi0fsPbIfoq1mIVV1AmBCW8dMTIzmH4VgUniUDgrHhEu230r/
                    2mU98Z6HdwHA9BO2kL4FhhGcRIk4KXQBil/4ZgeGpbNjpSXUqtBxMuF4hmkuxM22
                    AwZEICA/03FV5ReNkur9pFE6ZnsCggCBAJA9P3ziL1KygKbZwAH650V8oR5GaMsA
                    Zh3RF68hHGUWe2EY4tBvOvGbq9fw/0IUjhhkymNxC4x8LlWsVhkwnUPq3ulQw0gC
                    v6GETbgJWjgiDcqhaBs9bR6lSXBrfa6XN1qEzSOAGtabZHgFXzlFSQcoqa4d5xNw
                    4M4lkXPOLVVBAoIAgHixbT1aOexA1sxDldhL182NhZhKzWEgVhTivXLguX2CX3iI
                    zqVYpm9EJ17wM345tHWENqE84peiQi1re/HD9DPyEBNfoBeRZ2t6Kc9uONevKekQ
                    0ZlP9h/j0jYUQwmWsnpx9EhlaFUItFsM9ByV3B+xffZo53l02jaLQTbfuEA5

#this section (resources) allows the definition of openstack resources that are deployed as a heat stack
resources:
  #network resources
  #create a neutron network
  private_network:
    type: OS::Neutron::Net
    properties:
      name: private_network

  #create a neutron private subnet
  private_network_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.0.0/24
      gateway_ip: 192.168.0.1
      allocation_pools: [{ "start": 192.168.0.10, "end": 192.168.0.200 }]
      network: { get_resource: private_network }
      name: private_network_subnet
      dns_nameservers: { get_param: dns_nameserver }
      enable_dhcp: true

  #create a neutron router and connect it to the external network
  router:
    type: OS::Neutron::Router
    properties:
      name: router
      external_gateway_info:
        network: { get_param: public_network }

  #connect the neutron router to the neutron private subnet
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: private_network_subnet }

  #create a neutron security group for server access (allowing ssh and http)
  webserver_SG:
    type: OS::Neutron::SecurityGroup
    properties:
      description: specific security group
      name: webserver_SG
      rules:
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          port_range_min: 5000
          port_range_max: 5000

     #create a neutron floating ip (external ip address)
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  #associate the neutron floating ip with the nova instance (webserver)
  floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_attr: [haProxy, addresses, { get_resource: private_network }, 0, port] }


  #compute resources
  #cloud-init (cloud config) for instance initialization/customization of the webservers
  webServer_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
        - default
        - name: { get_param: username }
          gecos: { get_param: gecos }
          groups: sudo
          lock-passwd: false
          plain-text-passwd: webserver
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh-authorized-keys:
          - { get_param: user_key }
        package_update: true
        package_upgrade: true
        packages:
        - python
        - python-pip
        write_files:
        - path: /tmp/python/templates/index.html
          content: |
                <!DOCTYPE html>
                <html>
                  <body>
                    <title> Plant Classification App</title>
                    <h2>Webserver</h2>
                    {% if cp %}
                    <h3>CP ist -> {{cp}}!</h3>
                    {% endif %}
                    <form action="/" method="POST">
                    <input type="submit">
                    </form>
                    <script src='{{ url_for("static", filename="index.js") }}'></script>
                  </body>
                </html>
        - path: /tmp/python/serv.py
          content: |
                    import calcPlant as cP
                    from flask import Flask as f
                    from flask import render_template as rT
                    app = f(__name__)
                    
                    @app.route("/")
                    def mainPage():
                            return rT("index.html")
                    
                    @app.route("/", methods=["POST"])
                    def calcPlant():
                            return rT("index.html", cp=cP.calcPlant())
        - path: /tmp/python/static/index.js
          content: |
                    console.log("JAVASCRIPT");
        - path: /tmp/python/calcPlant.py
          content: |
                    def calcPlant():
                        print "calculcating Plant..."
                        return 1
        
        # install all needed parts for the webserver lib flask and start the webserver
        runcmd:
        - pip install setuptools
        - pip install flask
        - curl 192.168.0.4/update/1/1
        - cd /tmp/
        - mkdir python
        - cd python
        - FLASK_APP=serv.py flask run
        
        
  #compute resources
  #cloud-init (cloud config) for instance initialization/customization of the haProxy server
  haProxy_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
        - default
        - name: { get_param: username }
          gecos: { get_param: gecos }
          groups: sudo
          lock-passwd: false
          plain-text-passwd: haProxy
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh-authorized-keys:
          - { get_param: user_key }
        package_update: true
        package_upgrade: true
        packages:
        - python
        - python-pip
        - haproxy
        write_files:
        - path: /etc/haproxy/haproxy.cfg
          content: |
                global
                    maxconn 2000
                    user haproxy
                    group haproxy
                    
                defaults
                    log     global
                    mode    http
                    option  httplog
                    option  dontlognull
                    retries 3
                    option redispatch
                    timeout connect  5000
                    timeout client  10000
                    timeout server  10000
                    
                listen haproxy 0.0.0.0:80        
                    mode http
                    balance roundrobin
                    option httpclose
                    option forwardfor
                    
        - path: /tmp/python/confServ.py
          content: |
                import subprocess as sp
                from flask import Flask as f
                from flask import request as req
                app = f(__name__)
                
                HAPATH = "/etc/haproxy/haproxy.cfg"
                
                @app.route("/")
                def hello():
                	return "Hello %s" % req.remote_addr
                
                @app.route("/update/<int:type>/<int:serverNR>")
                def updateHAProxy(type, serverNR):
                	ip = req.remote_addr
                	name = "webserver%d" % serverNR
                	if(type == 1):
                		cmd = 'echo "        server %s %s check" >> %s' % (name, ip, HAPATH)
                	else:
                		pattern = "server %s %s check" % (name, ip)
                		cmd = "sed -i '/%s/d' %s" % (pattern, HAPATH)
                
                	sp.call(cmd, shell=True)
                	sp.call("service reload haproxy")
                    
        runcmd:
        - pip install setuptools
        - pip install flask 
        - cd /tmp/
        - mkdir python
        - cd python
        - FLASK_APP=confServ.py flask run
        - service haproxy start
        
  haProxyPort:
    type: OS::Neutron::Port
    properties:
        name: "haProxyIntern"
        network: {get_resource: private_network}
        fixed_ips: [{"ip_address":192.168.0.4, "subnet": {get_resource: private_network_subnet}}]
  
  haProxy:
    type: OS::Nova::Server
    properties:
      name: { get_param: haProxy_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_flavor }
      key_name: { get_param: ssh_key_name }
      networks:
      #- network: { get_resource: private_network }
      - port : { get_resource: haProxyPort}
      security_groups:
      - { get_resource: webserver_SG }
      user_data_format: RAW
      user_data: { get_resource: haProxy_cloud_config }

  #auto scaling for the webservers
  #create a heat auto scaling group for the nova instances
  web_autoscale_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: 2
      min_size: 2
      max_size: 5
      resource:
        type: OS::Nova::Server
        properties:
         name: { get_param: server_name }
         image: { get_param: image_id }
         flavor: { get_param: instance_flavor }
         key_name: { get_param: ssh_key_name }
         networks:
           - network: { get_resource: private_network }
         security_groups:
           - { get_resource: webserver_SG }
         metadata: {"metering.autoscale_group_name": "web_autoscale_group"}
         user_data_format: RAW
         user_data: { get_resource: webServer_cloud_config }

  #create a heat scaling policy for the scale out regarding the auto scaling group for the nova instances
  web_scaleout_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      cooldown: 60
      scaling_adjustment: 1

  #create a heat scaling policy for the scale in regarding the auto scaling group for the nova instances
  web_scalein_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      cooldown: 60
      scaling_adjustment: -1

  #create a ceilometer alarm that indicates heat to scale out regarding the auto scaling group for the nova instances
  web_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 25
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scaleout_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: gt

  #create a ceilometer alarm that indicates heat to scale in regarding the auto scaling group for the nova instances
  web_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 10
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scalein_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: lt

