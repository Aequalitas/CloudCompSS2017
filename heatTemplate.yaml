heat_template_version: 2016-04-08
#The value of heat_template_version tells HEAT not only the format of the template but also features that will be validated and supported
#2016-04-08 represents the Mitaka release

#this section (parameters) allows the specification of input parameters (with default values)
parameters:
  #network parameters (neutron)
  public_network:
    type: string
    label: public network
    description: public network (id or name) that is used as external network
    default: f4f8b2e9-520a-481c-a1e3-bc1d8015d35b

  dns_nameserver:
    type: comma_delimited_list
    label: dns nameserver
    description: ip addresses of dns servers that are used for neutron subnet creation
    default: 8.8.8.8

  #compute parameters (nova)
  ssh_key_name:
    type: string
    label: ssh key name
    description: name of an existing ssh keypair that is injected during instance initialization
    default: weidmann
    hidden: false
    constraints:
      - custom_constraint: nova.keypair

  image_id:
    type: string
    label: image id
    description: image id that is used for instance creation
    default: fb8d8ef9-6274-4279-b3ee-525bd7fecfac #VMDK Ubuntu 14.04
    hidden: false
    constraints:
      - custom_constraint: glance.image

  instance_flavor:
    type: string
    label: instance flavor that is used for instance creation
    description: flavor used for instances
    default: m1.small
    hidden: false
    constraints:
      - custom_constraint: nova.flavor

  server_name:
    type: string
    label: server name
    description: name of the instances
    hidden: false
    default: webServer

  haProxy_name:
    type: string
    label: haProxy name
    description: name of the haProxy instance
    hidden: false
    default: haProxy

  username:
    type: string
    label: username
    description: username of the additional user
    hidden: false
    default: webserver

  gecos:
    type: string
    label: users full name
    description: full name of the additional user
    hidden: false
    default: webserver

  user_key:
    type: string
    label: users public key
    description: public key of the additional user that is injected during instance initialization
    hidden: false
    default: AAAAB3NzaC1yc2EAAAADAQABAAABAQCIUtMQiX7D+G3Zob6VreTz3lgODT2DQUtY9C84RZ2ctTAxMQr8Thfb5p/yDLnmGurRwTS9E6/wADNXTFaLdPouq9aRSBDqbw7Ob+c6bLUSNT1S+CpY38Aw0gDPimFYLdgBsOpSd9gIJyD+GIMbXfHDhlFsO0NvDk+gIS+65FsLl+5S/iiAMSyxX9hu3XQrw24kWkGn4pFrYrkMB2zU60jL1RcjD4nqlqd5KUgbSFXLLWhGo3n27HVjfKz2cpqcjZ6DnAyAaImERlBlSc62ShYHfnko3liNV3e+SOf8imS94P5vgZ3hn8YDS7P/P6TgSk3sEScPwmrq4tQ3fH+fPgdV

#this section (resources) allows the definition of openstack resources that are deployed as a heat stack
resources:
  #network resources
  #create a neutron network
  private_network:
    type: OS::Neutron::Net
    properties:
      name: private_network

  #create a neutron private subnet
  private_network_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.25.0/24
      gateway_ip: 192.168.25.1
      allocation_pools: [{ "start": 192.168.25.10, "end": 192.168.25.200 }]
      network: { get_resource: private_network }
      name: private_network_subnet
      dns_nameservers: { get_param: dns_nameserver }
      enable_dhcp: true

  #create a neutron router and connect it to the external network
  router:
    type: OS::Neutron::Router
    properties:
      name: router
      external_gateway_info:
        network: { get_param: public_network }

  #connect the neutron router to the neutron private subnet
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: private_network_subnet }

  #create a neutron security group for server access (allowing ssh and http)
  webserver_SG:
    type: OS::Neutron::SecurityGroup
    properties:
      description: specific security group
      name: webserver_SG
      rules:
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          port_range_min: 5678
          port_range_max: 5678

     #create a neutron floating ip (external ip address)
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  #associate the neutron floating ip with the nova instance (webserver)
  floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_attr: [haProxy, addresses, { get_resource: private_network }, 0, port] }


  #compute resources
  #cloud-init (cloud config) for instance initialization/customization of the webservers
  webServer_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
        - default
        - name: { get_param: username }
          gecos: { get_param: gecos }
          groups: sudo
          lock-passwd: false
          plain-text-passwd: webserver
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh-authorized-keys:
          - { get_param: user_key }
        package_update: true
        package_upgrade: true
        packages:
        - python
       
        # fetches or installs all needed parts for the webserver lib flask and start the webserver
        runcmd:
        - wget https://bootstrap.pypa.io/get-pip.py #apt-get install pip version 1.5.4 (too old for opencv)
        - sudo python get-pip.py
        - pip install setuptools
        - pip install flask
        - pip install opencv-python
        - pip install scikit-learn # for pickle and the serialized model
        - pip install scipy # for pickle and the serialized model
        - curl 192.168.25.4:5678/update/1/1 # register this machine at the haproxy
        - cd /tmp/
        - mkdir python
        - cd python
        - wget -O serv.py https://raw.githubusercontent.com/Aequalitas/CloudCompSS2017/master/webserver/serv.py
        - wget -O calcPlant.py https://raw.githubusercontent.com/Aequalitas/CloudCompSS2017/master/webserver/calcPlant.py
        - mkdir templates
        - cd templates
        - wget -O index.html https://raw.githubusercontent.com/Aequalitas/CloudCompSS2017/master/webserver/templates/index.html
        - cd ..
        - sudo FLASK_APP=serv.py flask run -h $(hostname -I) -p 80
        
        
  #compute resources
  #cloud-init (cloud config) for instance initialization/customization of the haProxy server
  haProxy_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
        - default
        - name: { get_param: username }
          gecos: { get_param: gecos }
          groups: sudo
          lock-passwd: false
          plain-text-passwd: haProxy
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh-authorized-keys:
          - { get_param: user_key }
        package_update: true
        package_upgrade: true
        packages:
        - python
        - python-pip
        - haproxy
        
        runcmd:
        - wget -O /etc/haproxy/haproxy.cfg https://raw.githubusercontent.com/Aequalitas/CloudCompSS2017/master/haproxy/haproxy.cfg
        - echo "net.ipv4.ip_nonlocal_bind=1" >> /etc/sysctl.conf
        - sed -i "s/ENABLED=0/ENABLED=1/g" /etc/default/haproxy
        - pip install setuptools
        - pip install flask 
        - cd /tmp/
        - mkdir python
        - cd python
        - FLASK_APP=confServ.py flask run -h $(hostname -I) -p 5678
        - service haproxy start

  haProxyPort:
    type: OS::Neutron::Port
    properties:
        name: "haProxyIntern"
        network: {get_resource: private_network}
        fixed_ips: [{"ip_address":192.168.25.4, "subnet": {get_resource: private_network_subnet}}]
  
  haProxy:
    type: OS::Nova::Server
    properties:
      name: { get_param: haProxy_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_flavor }
      key_name: { get_param: ssh_key_name }
      networks:
      #- network: { get_resource: private_network }
      - port : { get_resource: haProxyPort}
      security_groups:
      - { get_resource: webserver_SG }
      user_data_format: RAW
      user_data: { get_resource: haProxy_cloud_config }

  #auto scaling for the webservers
  #create a heat auto scaling group for the nova instances
  web_autoscale_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: 2
      min_size: 2
      max_size: 5
      resource:
        type: OS::Nova::Server
        properties:
         name: { get_param: server_name }
         image: { get_param: image_id }
         flavor: { get_param: instance_flavor }
         key_name: { get_param: ssh_key_name }
         networks:
           - network: { get_resource: private_network }
         security_groups:
           - { get_resource: webserver_SG }
         metadata: {"metering.autoscale_group_name": "web_autoscale_group"}
         user_data_format: RAW
         user_data: { get_resource: webServer_cloud_config }

  #create a heat scaling policy for the scale out regarding the auto scaling group for the nova instances
  web_scaleout_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      cooldown: 60
      scaling_adjustment: 1

  #create a heat scaling policy for the scale in regarding the auto scaling group for the nova instances
  web_scalein_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_autoscale_group }
      cooldown: 60
      scaling_adjustment: -1

  #create a ceilometer alarm that indicates heat to scale out regarding the auto scaling group for the nova instances
  web_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 25
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scaleout_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: gt

  #create a ceilometer alarm that indicates heat to scale in regarding the auto scaling group for the nova instances
  web_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 10
      repeat_actions: true
      alarm_actions:
        - {get_attr: [web_scalein_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.autoscale_group_name': "web_autoscale_group"}
      comparison_operator: lt

